import random
import pandas

class algorytm:
    def __init__(self, osobniki):
        self.osobniki = osobniki

    def losowanie(siz):
        populacja = pandas.DataFrame(
            {
                "ID": [x for x in range(1, siz.osobniki)],
                "Cecha1": [random.randrange(1, 1000) for y in range(1, siz.osobniki)],
                "Cecha2": [random.randrange(1, 1000) for y in range(1, siz.osobniki)],
                "Cecha3": [random.randrange(1, 1000) for y in range(1, siz.osobniki)],
            }
        )
        return populacja

    def geny(self, var):
        #print(var["Cecha1"])
        c_var = pandas.DataFrame(
            {
                "ID": var["ID"],
                "Cecha1": [bin(var["Cecha1"][x]) for x in range(len(var["Cecha1"]))],
                "Cecha2": [bin(var["Cecha2"][x]) for x in range(len(var["Cecha2"]))],
                "Cecha3": [bin(var["Cecha3"][x]) for x in range(len(var["Cecha3"]))],

            }
        )
        return c_var

    def krzyzowanie(self,var):
        pop = 0
        nowa_c1 = []
        nowa_c2 = []
        nowa_c3 = []

        o1 = pandas.DataFrame(
            {
                "ID": var.iloc[:, 0],
            }
        )

        while pop < len(var.iloc[:,0]):
            id1 = [random.randrange(self.osobniki-1), random.randrange(self.osobniki-1)]
            while id1[0] == id1[1]:
                id1[1] = random.randrange(len(var.iloc[:,0]))

            #print(str(id1[0]) + " " + str(id1[1]))
            for i in range (1,4):
                osobnik_1 = var.iloc[id1[0], i]
                osobnik_2 = var.iloc[id1[1], i]
                if len(osobnik_1) > len(osobnik_2): liczba = len(osobnik_1)
                else : liczba = len(osobnik_2)
                nowy_osobnik = osobnik_1[2:liczba] + osobnik_2[liczba:]

                if i == 1: nowa_c1.append(nowy_osobnik)
                elif i == 2: nowa_c2.append(nowy_osobnik)
                elif i == 3: nowa_c3.append(nowy_osobnik)
            pop +=1

        o1["Cecha1"] = nowa_c1
        o1["Cecha2"] = nowa_c2
        o1["Cecha3"] = nowa_c3
        return o1

    def mutacja(self, var):
        o1 = pandas.DataFrame(
            {
                "ID": var.iloc[:, 0],
            }
        )
        nowa_c1 = []
        nowa_c2 = []
        nowa_c3 = []
        for os in range (len(var.iloc[:,0])) :
            for cechy in range(1,4):
                cecha = var.iloc[os,cechy]
                for bite in range (len(cecha)):
                    prop = random.randrange(2)
                    if prop == 1 :
                        if cecha[bite] == "1": cecha[bite].replace("1","0")
                        else: cecha[bite].replace("0","1")
                if cechy == 1:  nowa_c1.append(cecha)
                elif cechy == 2: nowa_c2.append(cecha)
                elif cechy == 3: nowa_c3.append(cecha)
        o1["Cecha1"] = nowa_c1
        o1["Cecha2"] = nowa_c2
        o1["Cecha3"] = nowa_c3
        return o1

    def debin(self,var):
        cecha1 = []
        cecha2 = []
        cecha3 = []
        o1 = pandas.DataFrame(
            {
                "ID": var.iloc[:,0],
            }
        )

        for x in range(len(var.iloc[:,0])):

            cecha1.append(int(var.iloc[x,1],2))
            cecha2.append(int(var.iloc[x,2],2))
            cecha3.append(int(var.iloc[x,3],2))
        print("cecha1")
        print(cecha1)
        print("cecha2")
        print(cecha2)
        print("cecha3")
        print(cecha3)
        o1["Cecha1"] = cecha1
        o1["Cecha2"] = cecha2
        o1["Cecha3"] = cecha3


        return o1

    def funkcja_celu(self,var):
        print("Ocena przezywalnosci")
        for i in range(len(var.iloc[:,0])):
            if(var.iloc[i,1]*0.5 + var.iloc[i,2]*0.3 + var.iloc[i,3]*0.2 > 600): print(str(var.iloc[i,0]) + " Osobnik przezyje")
            else: print(str(var.iloc[i,0]) + " Osobnik nie przezyje")

print("Jaki rozmiar ma miec populacja poczatkowa?: ")
a = input()

while 1:
    dzialanie = algorytm(int(a))

    populacja_poczotkowa = dzialanie.losowanie()
    populacja_bin = dzialanie.geny(populacja_poczotkowa)
    populacja_mod_1 = dzialanie.krzyzowanie(populacja_bin)
    populacja_mod_2 = dzialanie.mutacja(populacja_mod_1)
    nowa_pop = dzialanie.debin(populacja_mod_2)


    print("Wysolowana generacja: ")
    print(populacja_bin)
    print("Nowa generacja (krzyzowanie): ")
    print(populacja_mod_1)
    print("Wysolowana generacja (mutacja): ")
    print(populacja_mod_2)

    print("Nowa generacja: ")
    print(nowa_pop)

    dzialanie.funkcja_celu(nowa_pop)

